PRO MARX_RUN,IMGDIR=IMGDIR,BINSIZE=BINSIZE

; Generates a FITS image from files provided by MARX, a software
; package associated with the Chandra science center

IF NOT KEYWORD_SET(IMGDIR) THEN IMGDIR='marxsims'
IF NOT KEYWORD_SET(BINSIZE) THEN BINSIZE=1  ; Generates images with chandra native pix size of 0.492"

DETECTOR='ACIS-I'
BETA=0.6
KEV=0.85      ; central bandpass of observation (keV)
FLUX=0.02    ; photons/sec/cm^2
RC=10.        ; core radius of beta model in arcsec.  At distance of Virgo cluster, would be a 3 kpc core radius

X0=880       ; determined "by eye" 
Y0=700
WIDTH=300    ; approx size of largest galaxy determined "by eye"

MAXWVT=10.0  ; constraints the maximum size of a Weighted Vonnoloi Tesselated cell to the area of MAXWVT^2 pixels
SNRTARGET=4.0 ; targeted value of signal-to-noise to reach for each WVT cell. 

F='("OutputDir=",A," GratingType=NONE DetIdeal=yes DetectorType=",A," SpectrumType=FLAT '+$
    'SourceType=BETA S-BetaCoreRadius=",F0.2," S-BetaBeta=",F0.3,'+$
    '" MinEnergy=",F0.2," MaxEnergy=",F0.2," SourceFlux=",F0.5)'

; Start the CIAO environment so that CIAO commands can be used
; Just make sure that the CIAO environment has not already been
; started.  If it has already started, then some commands will be
; defined. test for the existance of these commands:
SPAWN,'which fluximage',RESULT
IF STRTRIM(RESULT,2) EQ '' THEN STOP,'Need to start up ciao before IDL!'

;#############################################################
;  TEST EFFECTS OF PIXELATION
;#############################################################
; by making the same galaxy, at the same brightness,have a steadily
; decreasing physical extent on the detector
; NOTE:  by holding flux constant and shrinking the galaxy,
; essentially what we are doing is creating small galaxies with high
; central surface brightnesses, which probably aids the
; algorith, That's OK, since all we are testing here is
; pixellation effects.  In a separate series of tests, we'll
; shrink AND decrease the flux accordingly to maintain constant
; surface brightness across the galaxy and see how the algorithm
; does.
; When Mehmet runs these galaxies, he should play like they are ALL AT
; THE SAME DISTANCE 
DIRBASE='pixeffects'
SCALE=[1.0,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1]

FOR I=0,N_ELEMENTS(SCALE)-1 DO BEGIN
   OUTDIR=STRING(DIRBASE,FIX(SCALE(I)*100.),FORMAT='(A,I0)')
   PARAMS=STRING(OUTDIR,DETECTOR,RC*SCALE(I),BETA,KEV,KEV,FLUX,FORMAT=F)
   SPAWN,"marx @@marx-galsim.par "+PARAMS
; Now generate a fits table that is just like what one would get from Chandra
   SPAWN,"marx2fits "+OUTDIR+" "+OUTDIR+"/"+OUTDIR+"_tab.fits"
; Now convert to a "real" image, a flux image
; But first, need to generate an ASOL file (haven't figured out
; what this file really does, but it is needed in order to generate
; the image).
; **** NOTE THAT THE FILE marxasp.par NEEDS TO BE IN THE DIRECTORY IN
; **** WHICH marx_run.pro IS EXECUTED
   SPAWN,'marxasp marxDir='+OUTDIR+' OutputFile=asoltmp.fits'
; There was a problem with this image, as I learned from the MARX/CXC
; helpdesk: the simulated ASOL files do not have any scatter. Any real
; observation always has some scatter because the pointing is never
; perfect. At some point, the code looks at the max/min of the roll
; angles in the ASOL and can't deal with the fact that they are
; all absolutely identical, so the work-around for now is to add a
; very small amount of random scatter to that column in the ASOL file:
;   SPAWN,'punlearn dmtcalc'
   SPAWN,'dmtcalc asoltmp.fits '+OUTDIR+'/'+OUTDIR+'_asol.fits '+$
         'exp="roll=roll;roll=(roll+((#trand-0.5)*0.0001))" clobber=yes'
; Now generate the image
;   SPAWN,'punlearn fluximage'
   SPAWN,'fluximage '+OUTDIR+'/'+OUTDIR+'_tab.fits[ccd_id=3] tmpimg/ '+$
         'asolfile='+OUTDIR+'/'+OUTDIR+'_asol.fits '+$
         'badpixfile=NONE maskfile=NONE bands=soft bin='+STRTRIM(STRING(BINSIZE),2)+' clobber=yes'
; Now rename the image file with a .fits extension (why fluximage
; calls it ".img" is beyond me
   SPAWN,'mv tmpimg/soft_flux.img '+IMGDIR+'/'+OUTDIR+'.fits'
; Note that the above flux image, in units of photons/s/cm^2/pixel, is
; generated by dividing the counts image (soft_thresh.img) by the
; effective exposure map (soft_thresh.expmap).  We need the effective
; exposure map to generate a noise map for input into the WVT:
; (see the Diehl & Statler, 2006 paper MNRAS 368, 497, eqn 9)
   SPAWN,'mv tmpimg/soft_thresh.img '+IMGDIR+'/'+OUTDIR+'_cnts.fits'
   SPAWN,'mv tmpimg/soft_thresh.expmap '+IMGDIR+'/'+OUTDIR+'_exp.fits'
; Now apply the Weighted Voronoi Tesselations routine to the image, so
; that every single pixel is populated with a value (e.g., interpolate
; to fill in the gaps between pixels w/ counts ... remember, the
; pixels with "zeros" does not indicate a lack of flux at that
; coordinate, but instead could just reflect that that pixel "lost" in
; the roll of dice when nature decided where to plant the photon. IN
; other words, the light distribution of the real source is merely
; sampled in the Chandra images, with low number statistics. Always
; need to remember this difference from other wavelength data.  The
; images for the ACIS data are not "continuous", with light spilling
; on all pixels. After the pixels have been populated w/ WVT, then
; take the centers of the voronoi cells and then apply an
; interpolation across them to generate the surface.  This surface can
; then be contoured.
   INFILE=IMGDIR+'/'+OUTDIR+'.fits'
   CNTSFILE=IMGDIR+'/'+OUTDIR+'_cnts.fits'
   EXPFILE=IMGDIR+'/'+OUTDIR+'_exp.fits'
   OUTFILE=IMGDIR+'/'+OUTDIR+'_final.fits'

; Now just cut out the part of the image that is relevent to the
; source, so that Mehmet's code does not have to handle a large
; image of mostly empty pixels:
   FXREAD,INFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,INFILE,IMG,HDR
   
   FXREAD,CNTSFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,CNTSFILE,IMG,HDR

   FXREAD,EXPFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,EXPFILE,IMG,HDR

   SZ=SIZE(IMG)

   NEWX0=ROUND(FLOAT(SZ(1))/2.)
   NEWY0=ROUND(FLOAT(SZ(2))/2.)
   PRINT,'ENTERING WVT_NATNEIGHBOR FOR '+INFILE

   WVT_NATNEIGHBOR,INFILE,CNTSFILE,EXPFILE,OUTFILE,SNR=SNRTARGET,$
     MAXCELLSIZE=MAXWVT,CENTER=[NEWX0,NEWY0]
   
   PRINT,'COMPLETED WVT_NATNEIGHBOR FOR '+INFILE
   
ENDFOR

stop,'finished up pixeffects series'

SNRTESTS:
;##############################################################
;  TEST EFFECTS OF WORSENING SNR
;##############################################################
; by making the same galaxy, of the same physical extend on the
; detector, have steadily decreasing brightness (effectively, causing
; the noise to increase)
; When Mehmet runs these galaxies, he should play lke they are ALL AT
; THE SAME DISTANCE 
DIRBASE='snreffects'
FOR I=0,N_ELEMENTS(SCALE)-1 DO BEGIN
   OUTDIR=STRING(DIRBASE,FIX(SCALE(I)*100.),FORMAT='(A,I0)')
   PARAMS=STRING(OUTDIR,DETECTOR,RC,BETA,KEV,KEV,FLUX*SCALE(I),FORMAT=F)
   SPAWN,"marx @@marx-galsim.par "+PARAMS
   SPAWN,"marx2fits "+OUTDIR+" "+OUTDIR+"/"+OUTDIR+"_tab.fits"
   SPAWN,'marxasp marxDir='+OUTDIR+' OutputFile=asoltmp.fits'
;   SPAWN,'punlearn dmtcalc'
   SPAWN,'dmtcalc asoltmp.fits '+OUTDIR+'/'+OUTDIR+'_asol.fits '+$
         'exp="roll=roll;roll=(roll+((#trand-0.5)*0.0001))" clobber=yes'
;   SPAWN,'punlearn fluximage'
   SPAWN,'fluximage '+OUTDIR+'/'+OUTDIR+'_tab.fits[ccd_id=3] tmpimg/ '+$
         'asolfile='+OUTDIR+'/'+OUTDIR+'_asol.fits '+$
         'badpixfile=NONE maskfile=NONE bands=soft bin='+STRTRIM(STRING(BINSIZE),2)+' clobber=yes'
   SPAWN,'mv tmpimg/soft_flux.img '+IMGDIR+'/'+OUTDIR+'.fits'
   SPAWN,'mv tmpimg/soft_thresh.img '+IMGDIR+'/'+OUTDIR+'_cnts.fits'
   SPAWN,'mv tmpimg/soft_thresh.expmap '+IMGDIR+'/'+OUTDIR+'_exp.fits'
   INFILE=IMGDIR+'/'+OUTDIR+'.fits'
   CNTSFILE=IMGDIR+'/'+OUTDIR+'_cnts.fits'
   EXPFILE=IMGDIR+'/'+OUTDIR+'_exp.fits'
   OUTFILE=IMGDIR+'/'+OUTDIR+'_final.fits'

   FXREAD,INFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,INFILE,IMG,HDR
   
   FXREAD,CNTSFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,CNTSFILE,IMG,HDR

   FXREAD,EXPFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,EXPFILE,IMG,HDR

   SZ=SIZE(IMG)

   NEWX0=ROUND(FLOAT(SZ(1))/2.)
   NEWY0=ROUND(FLOAT(SZ(2))/2.)
   
   PRINT,'ENTERING WVT_NEIGHBOR FOR '+INFILE
   WVT_NATNEIGHBOR,INFILE,CNTSFILE,EXPFILE,OUTFILE,SNR=SNRTARGET,$
     MAXCELLSIZE=MAXWVT,CENTER=[NEWX0,NEWY0]
   
   PRINT,'COMPLETED WVT_NATNEIGHBOR FOR '+INFILE
ENDFOR

;##############################################################
;  TEST EFFECTS OF DISTANCE
;##############################################################
; by making the same galaxy have both decreasing physical extend on the
; detector and steadily decreasing brightness, replicating the effect
; of increasing distance. This series of tests will essentially test
; both the ability of the algorithm to deal with pixelation in the
; face of low flux levels, and then to test the regridding performed
; by Mehmet's code to adjust for distance effects.
; These galaxies should be run through twice:
;  (1) without compensation for distance -- treat as if all at the same distance
;  (2) compensate for distance -- do usual regridding, etc. 
DIRBASE='disteffects'
SCALE=FINDGEN(10)+1.0  ; ratio of distances relative to the closest one, out to 10x more distant
FOR I=0,N_ELEMENTS(SCALE)-1 DO BEGIN
   OUTDIR=STRING(DIRBASE,FIX(SCALE(I)),FORMAT='(A,I0)')
   PARAMS=STRING(OUTDIR,DETECTOR,RC/SCALE(I),BETA,KEV,KEV,FLUX/(SCALE(I)^2),FORMAT=F)
   SPAWN,"marx @@marx-galsim.par "+PARAMS
   SPAWN,"marx2fits "+OUTDIR+" "+OUTDIR+"/"+OUTDIR+"_tab.fits"
   SPAWN,'marxasp marxDir='+OUTDIR+' OutputFile=asoltmp.fits'
;   SPAWN,'punlearn dmtcalc'
   SPAWN,'dmtcalc asoltmp.fits '+OUTDIR+'/'+OUTDIR+'_asol.fits '+$
         'exp="roll=roll;roll=(roll+((#trand-0.5)*0.0001))" clobber=yes'
;   SPAWN,'punlearn fluximage'
   SPAWN,'fluximage '+OUTDIR+'/'+OUTDIR+'_tab.fits[ccd_id=3] tmpimg/ '+$
         'asolfile='+OUTDIR+'/'+OUTDIR+'_asol.fits '+$
         'badpixfile=NONE maskfile=NONE bands=soft bin='+STRTRIM(STRING(BINSIZE),2)+' clobber=yes'
   SPAWN,'mv tmpimg/soft_flux.img '+IMGDIR+'/'+OUTDIR+'.fits'
   SPAWN,'mv tmpimg/soft_thresh.img '+IMGDIR+'/'+OUTDIR+'_cnts.fits'
   SPAWN,'mv tmpimg/soft_thresh.expmap '+IMGDIR+'/'+OUTDIR+'_exp.fits'
   INFILE=IMGDIR+'/'+OUTDIR+'.fits'
   CNTSFILE=IMGDIR+'/'+OUTDIR+'_cnts.fits'
   EXPFILE=IMGDIR+'/'+OUTDIR+'_exp.fits'
   OUTFILE=IMGDIR+'/'+OUTDIR+'_final.fits'

   FXREAD,INFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,INFILE,IMG,HDR
   
   FXREAD,CNTSFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,CNTSFILE,IMG,HDR

   FXREAD,EXPFILE,IMG,HDR
   IMG=IMG(X0-WIDTH:X0+WIDTH,Y0-WIDTH:Y0+WIDTH)
   WRITEFITS,EXPFILE,IMG,HDR

   SZ=SIZE(IMG)

   NEWX0=ROUND(FLOAT(SZ(1))/2.)
   NEWY0=ROUND(FLOAT(SZ(2))/2.)
   
   PRINT,'ENTERING WVT_NATNEIGHBOR FOR '+INFILE
   WVT_NATNEIGHBOR,INFILE,CNTSFILE,EXPFILE,OUTFILE,SNR=SNRTARGET,$
     MAXCELLSIZE=MAXWVT,CENTER=[NEWX0,NEWY0]
   
   PRINT,'COMPLETED WVT_NATNEIGHBOR FOR '+INFILE
ENDFOR

; Now take one of the above images and start gaussian-smoothing at
; different sized kernels




END
